[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Nutrients Tracking",
    "section": "",
    "text": "1 Introduction\nLiving abroad often means taking on the responsibility of preparing one’s own meals, which can make it challenging to ensure a balanced and healthy diet. Understanding the nutritional content of food is crucial, especially for individuals with specific dietary needs, such as increasing iron intake or reducing sugar consumption. However, identifying the right foods to meet these needs can be overwhelming without reliable information. This project leverages data from the United States Department of Agriculture (USDA), which provides comprehensive details on the nutritional composition of various foods. By conducting exploratory data analysis and creating visualizations, this project aims to simplify the process of identifying nutrient-rich foods and making informed dietary decisions, ultimately supporting better health and well-being.\n\n\nCode\nlibrary(ggplot2)\n\n# Define coordinates for the letter U\nu_points &lt;- data.frame(\n  x = c(rep(1, 50), seq(1, 1.8, length.out = 50), rep(1.8, 50)),\n  y = c(seq(0, 2, length.out = 50), rep(0, 50), seq(0, 2, length.out = 50))\n)\n\n# Define coordinates for the letter S with adjusted height and position\ntheta &lt;- seq(0, pi, length.out = 100)\ns_top &lt;- data.frame(x = 2.7 + 0.5 * sin(-theta), y = 1.5 + 0.5 * cos(-theta)) \ns_bottom &lt;- data.frame(x = 2.7 + 0.5 * sin(theta), y = 0.5 + 0.5 * cos(theta))  \ns_points &lt;- rbind(s_top, s_bottom)\n\n# Define coordinates for the letter D with adjusted height and position\nd_line &lt;- data.frame(x = rep(3.5, 50), y = seq(0, 2, length.out = 50))  # Vertical line\nd_semi_circle &lt;- data.frame(\n  x = 3.5 + 0.8 * cos(seq(-pi / 2, pi / 2, length.out = 100)), \n  y = 1 + 1 * sin(seq(-pi / 2, pi / 2, length.out = 100))\n)  \nd_points &lt;- rbind(d_line, d_semi_circle)\n\n# Define coordinates for the letter A with a crossbar and position adjustment\na_points &lt;- data.frame(\n  x = c(seq(4.5, 5, length.out = 50), seq(5, 5.5, length.out = 50), seq(4.8, 5.2, length.out = 50)),\n  y = c(seq(0, 2, length.out = 50), seq(2, 0, length.out = 50), rep(1, 50))\n)\n\n# Combine all the letter point data\nall_points &lt;- rbind(\n  data.frame(letter = \"U\", x = u_points$x, y = u_points$y),\n  data.frame(letter = \"S\", x = s_points$x, y = s_points$y),\n  data.frame(letter = \"D\", x = d_points$x, y = d_points$y),\n  data.frame(letter = \"A\", x = a_points$x, y = a_points$y)\n)\n\n# Create the scatter plot\nggplot(all_points, aes(x = x, y = y, color = letter)) +\n  geom_point(size = 3, alpha = 0.8) +\n  labs(\n    x = \"\",\n    y = \"\"\n  ) +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    axis.text = element_blank(),\n    axis.ticks = element_blank(),\n    panel.grid = element_blank(),\n    plot.title = element_text(size = 16, face = \"bold\", hjust = 0.5)\n  ) +\n  scale_color_manual(values = c(\"U\" = \"red\", \"S\" = \"orange\", \"D\" = \"yellow\", \"A\" = \"darkgreen\"))",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "2  Data",
    "section": "",
    "text": "2.1 Read Data and Description\nFor this project, we utilized the FoodData Central API provided by the United States Department of Agriculture (USDA) to access detailed nutritional data.\nThis API is designed to help developers incorporate nutrient information into their applications by providing comprehensive documentation about the database structure and data elements. Using this API, we collected data on 10,000 branded food items, capturing 24 features such as brand name, food category, package weight, ingredients, and various nutrients and vitamins. The data were exported to a CSV file and imported into RStudio for analysis.\nIn this project, we also provide a ready-to-use script USDA_DataCrawling.ipynb, which allows users to efficiently crawl the USDA data using the FoodData Central API. This Jupyter Notebook is designed to simplify the data extraction process, enabling users to retrieve nutritional information for thousands of food items by customizing parameters such as brand names, food categories, or nutrient types. The script is well-documented and easy to modify, making it accessible for users of all skill levels. By running this notebook, users can seamlessly gather detailed USDA data and save it to a CSV file for further analysis or integration into their own applications.\nWhile the dataset is rich in information, we encountered missing values in some fields, particularly for ingredients, as not all foods have complete nutritional details. Despite this, the data offer valuable insights into nutrient composition, enabling us to identify and address gaps in dietary information. The data source is well-documented and regularly updated by the USDA, ensuring reliability and accessibility for research purposes.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "data.html#read-data-and-description",
    "href": "data.html#read-data-and-description",
    "title": "2  Data",
    "section": "",
    "text": "2.1.1 Load required library\n\n\nCode\nlibrary(readr)\nlibrary(tidyverse)\nlibrary(dplyr)\n\n\n\n\n2.1.2 Data Overview\n\n\nCode\ndata &lt;- read_csv(\"Branded Nutrients_Dataset.csv\",\n                 show_col_types = FALSE)\n\n\nIn this dataset, there are 10,000 rows of data, where each row refers to a product. There are total 24 columns including information listed below.\n\n“fdcId”\n“description”\n“foodCategory”\n“brandOwner”\n“brandName”\n“packageWeight”\n“publishedDate”\n“Protein G”\n“Total lipid (fat) G” \n“Carbohydrate, by difference G”\n“Energy KCAL”\n“Total Sugars G”\n“Fiber, total dietary G”\n“Calcium, Ca MG”\n“Iron, Fe MG”\n“Sodium, Na MG”\n“Vitamin C, total ascorbic acid MG”\n“Cholesterol MG”\n“Fatty acids, total trans G”\n“Fatty acids, total saturated G”\n“Vitamin A UG”\n“Potassium, K MG”\n“Vitamin D (D2 + D3) UG”\n“Sugars, added G”",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "data.html#missing-value-analysis",
    "href": "data.html#missing-value-analysis",
    "title": "2  Data",
    "section": "2.2 Missing value analysis",
    "text": "2.2 Missing value analysis\nWe noticed that except for fdcId and description, all other columns have missing values in different levels. Therefore, we examine the percentage of missing values for all columns.\n\n\nCode\nmissing_summary &lt;- data.frame(\n  Column = colnames(data),\n  MissingCount = colSums(is.na(data)),\n  MissingPercent = colSums(is.na(data)) / nrow(data) * 100\n) |&gt; \n  arrange(desc(MissingPercent))\n\nggplot(missing_summary, aes(x = reorder(Column, -MissingPercent), y = MissingPercent)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  theme_minimal() +\n  scale_y_continuous(breaks = seq(0, 100, by = 10), limits = c(0, 100)) +  # Adjust y-axis breaks\n  labs(\n    title = \"Percentage of Missing Values per Nutrient\",\n    x = \"Nutrients\",\n    y = \"Percentage of Missing Values\"\n  ) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\nFrom above, we can see that there are few missing values for main nutrients such as Protein G, Energy KCAL, Total lipid (fat) G, with less than 1% missing values. Also we have most brandOwner information with 2.27% missing values.\nFor nutrients that are not always displayed on packages, including Vitamins, Sugars, added G, we have high portions of missing values. Therefore, in this project, we would focus on main nutrients in most of the time, and address supplemented nutrients when it is necessary.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "results.html",
    "href": "results.html",
    "title": "3  Results",
    "section": "",
    "text": "3.1 Our Data Story\nWelcome to our culinary journey through nutritional data! Using data from the USDA, we’re diving deep into the nutritional profiles of various food categories like bread, meat, vegetables, and beverages. Imagine walking through a grocery store or preparing a meal—we’ll take you on a journey through the foods we often enjoy, starting with appetizers like bread, moving on to hearty main courses of meat, pairing it with fresh vegetables, and finally topping it all off with a refreshing beverage. This project isn’t just about numbers—it’s about exploring the stories behind the foods that nourish us.\nCode\nsuppressPackageStartupMessages(library(tidyverse, quietly = TRUE))\nsuppressPackageStartupMessages(library(dplyr, quietly = TRUE))\nsuppressPackageStartupMessages(library(stringr, quietly = TRUE))\nsuppressPackageStartupMessages(library(redav, quietly = TRUE))\nsuppressPackageStartupMessages(library(GGally, quietly = TRUE))\ndata &lt;- read_csv(\"Branded Nutrients_Dataset.csv\",\n                 show_col_types = FALSE)\n\ndata &lt;- data |&gt; \n  mutate(publishedDate = as.Date(publishedDate, format = \"%m/%d/%Y\"))\n\nlatest_data &lt;- data |&gt; \n  group_by(description, foodCategory, brandOwner, brandName) |&gt; \n  slice_max(order_by = publishedDate, n = 1, with_ties = FALSE) |&gt; \n  ungroup()",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#breads",
    "href": "results.html#breads",
    "title": "3  Results",
    "section": "3.2 Breads",
    "text": "3.2 Breads\nLet’s dive into the fascinating world of bread through our data visualization journey! As we begin our journey into the world of bread, let’s first explore the overall nutritional differences across various types of bread. In the first plot, we observe a clear separation of bread based on their nutritional attributes like protein content, fat, sugars, and sodium. Notably, whole wheat sandwich rolls stand out with significantly higher values for specific nutrients compared to others, suggesting that they pack more in terms of energy and macronutrients. This chart sets the stage for understanding how bread types can vary widely in their health benefits, inviting us to dive deeper into specific categories.\n\n\nCode\n# remotes::install_github(\"jtr13/redav\")\n# Filter rows where foodCategory is \"Breads & Buns\" and keep only selected columns\nbread_data &lt;- latest_data |&gt; \n  filter(foodCategory == \"Breads & Buns\") |&gt; \n  select(\n    description, \n    foodCategory, \n    brandOwner, \n    brandName, \n    packageWeight, \n    `Protein G`, \n    `Total lipid (fat) G`, \n    `Carbohydrate, by difference G`, \n    `Energy KCAL`, \n    `Total Sugars G`, \n    `Sodium, Na MG`\n  ) |&gt; \n  drop_na()\n\n# Adjusted function to parse packageWeight\nparse_packageWeight &lt;- function(data, food_type) {\n  # Ensure food_type is provided\n  if (missing(food_type)) {\n    stop(\"The parameter 'food_type' must be specified as 'solid' or 'liquid'.\")\n  }\n  \n  # Validate food_type input\n  if (!food_type %in% c(\"solid\", \"liquid\")) {\n    stop(\"Invalid 'food_type'. Please use 'solid' or 'liquid'.\")\n  }\n  \n  # Solid food logic\n  if (food_type == \"solid\") {\n    patterns &lt;- list(\n      lbs = \"(\\\\d+(\\\\.\\\\d+)?)\\\\s*[lL][bB][sS]?\",\n      g = \"(\\\\d+(\\\\.\\\\d+)?)\\\\s*[gG]\",\n      oz = \"(\\\\d+(\\\\.\\\\d+)?)\\\\s*[oO][zZ]\",\n      kg = \"(\\\\d+(\\\\.\\\\d+)?)\\\\s*[kK][gG]\"\n    )\n    \n    for (unit in names(patterns)) {\n      extracted &lt;- stringr::str_extract(data$packageWeight, patterns[[unit]])\n      data[[unit]] &lt;- as.numeric(stringr::str_extract(extracted, \"\\\\d+(\\\\.\\\\d+)?\"))\n    }\n  }\n  \n  # Liquid food logic (currently empty)\n  if (food_type == \"liquid\") {\n    patterns &lt;- list(\n      gal = \"(\\\\d+(\\\\.\\\\d+)?)\\\\s*[gG][aA][lL]\",\n      l = \"(\\\\d+(\\\\.\\\\d+)?)\\\\s*[lL]\\\\b\",  # Matches 'L' but not 'mL'\n      ml = \"(\\\\d+(\\\\.\\\\d+)?)\\\\s*[mM][lL]\",\n      fl_oz = \"(\\\\d+(\\\\.\\\\d+)?)\\\\s*[fF][lL]\\\\s*[oO][zZ]\",\n      qt = \"(\\\\d+(\\\\.\\\\d+)?)\\\\s*[qQ][tT][sS]?\"  # Matches 'QT', 'QTS', 'Quart'\n    )\n    \n    for (unit in names(patterns)) {\n      extracted &lt;- stringr::str_extract(data$packageWeight, patterns[[unit]])\n      data[[unit]] &lt;- as.numeric(stringr::str_extract(extracted, \"\\\\d+(\\\\.\\\\d+)?\"))\n    }\n  }\n\n\n  return(data)\n}\n\n# Fill the missing values for the aligned unit\nfill_missing &lt;- function(data, food_type) {\n  # Ensure food_type is provided\n  if (missing(food_type)) {\n    stop(\"The parameter 'food_type' must be specified as 'solid' or 'liquid'.\")\n  }\n  \n  # Validate food_type input\n  if (!food_type %in% c(\"solid\", \"liquid\")) {\n    stop(\"Invalid 'food_type'. Please use 'solid' or 'liquid'.\")\n  }\n  \n  # Solid food logic\n  if (food_type == \"solid\") {\n    data &lt;- parse_packageWeight(data, food_type) |&gt;\n      mutate(\n        g = case_when(\n          !is.na(lbs) ~ lbs * 454,\n          !is.na(oz) ~ floor(oz * 28.3495231),\n          !is.na(kg) ~ kg * 1000,\n          TRUE ~ g\n        )\n      ) |&gt;\n      filter(!is.na(g)) |&gt;\n      select(-lbs, -oz, -kg) |&gt;\n      rename(packageWeight_g = g)\n  }\n  \n  # Liquid food logic (currently empty)\n  if (food_type == \"liquid\") {\n    data &lt;- parse_packageWeight(data, food_type) |&gt;\n      mutate(\n        ml = case_when(\n          !is.na(l) ~ l * 1000,\n          !is.na(fl_oz) ~ floor(fl_oz * 29.5735),\n          !is.na(qt) ~ qt * floor(qt * 946.352946),\n          !is.na(gal) ~ floor(gal * 3785.411784 ),\n          TRUE ~ ml\n        )\n      ) |&gt;\n      filter(!is.na(ml)) |&gt;\n      select(-l, -fl_oz, -qt, -gal) |&gt;\n      rename(packageWeight_ml = ml)\n  }\n  \n  return(data)\n}\n\n# Function to align weight scale\nalign_weight_scale &lt;- function(data, food_type) {\n  # Step 1: Call fill_missing based on food_type\n  data &lt;- fill_missing(data, food_type)\n  \n  if (food_type == \"solid\"){\n      # Step 2: Perform conversion to align weight scale\n      weight_column &lt;- paste0(\"packageWeight_\", \"g\")\n      \n      if (!weight_column %in% colnames(data)) {\n        stop(paste(\"Column\", weight_column, \"is missing in the data.\"))\n      }\n      \n      data &lt;- data |&gt;\n        mutate(ratio = .data[[weight_column]] / 100)\n      \n      numeric_cols &lt;- sapply(data, is.numeric)\n      numeric_cols &lt;- names(numeric_cols[numeric_cols])\n      numeric_cols &lt;- setdiff(numeric_cols, c(weight_column, \"packageWeight\", \"ratio\"))\n      \n      data[numeric_cols] &lt;- data[numeric_cols] / data$ratio\n      \n      data &lt;- data |&gt;\n        select(-all_of(weight_column), -packageWeight, -ratio)\n      \n  }\n  else if (food_type == \"liquid\"){\n      # Step 2: Perform conversion to align weight scale\n      weight_column &lt;- paste0(\"packageWeight_\", \"ml\")\n      \n      if (!weight_column %in% colnames(data)) {\n        stop(paste(\"Column\", weight_column, \"is missing in the data.\"))\n      }\n      \n      data &lt;- data |&gt;\n        mutate(ratio = .data[[weight_column]] / 100)\n      \n      numeric_cols &lt;- sapply(data, is.numeric)\n      numeric_cols &lt;- names(numeric_cols[numeric_cols])\n      numeric_cols &lt;- setdiff(numeric_cols, c(weight_column, \"packageWeight\", \"ratio\"))\n      \n      data[numeric_cols] &lt;- data[numeric_cols] / data$ratio\n      \n      data &lt;- data |&gt;\n        select(-all_of(weight_column), -packageWeight, -ratio)\n      \n  }\n  else {\n    print(\"Invalid food_type\")\n  }\n\n  return(data)\n}\n\nbread_data &lt;- align_weight_scale(bread_data, \"solid\")\n\nbread_data &lt;- bread_data |&gt;\n  mutate( \n    description = case_when(\n      description == \"100% WHOLE WHEAT SANDWICH THINS ROLLS, 100% WHOLE WHEAT\" ~ \"WHOLE WHEAT SANDWICH THINS ROLLS\",\n      description == \"2 BRIOCHE CHOCOLATE POPOVERS, 2 BRIOCHE\" ~ \"BRIOCHE CHOCOLATE POPOVERS\",\n      description == \"7 GRAIN OLIVE OIL CROSTINI, 7 GRAIN OLIVE OIL\" ~ \"GRAIN OLIVE OIL CROSTINI\",\n      description == \"8 GRAIN ORGANIC GRAIN HEARTY WHEAT FLATBREAD, 8 GRAIN\" ~ \"GRAIN HEARTY WHEAT FLATBREAD\",\n      TRUE ~ description  # Keep the original description for all other rows\n    )\n  )\n\noptions(warn = -1)\nsuppressWarnings(\n  draw_biplot(bread_data, point_labels = TRUE, point_size = 2, label_size = 3, fix_sign = TRUE)\n)\n\n\n\n\n\n\n\n\n\nCode\noptions(warn = 0)\n\n\nBagels Biplot\nNext, we narrow our focus to bagels from different brands. The second plot reveals interesting insights into how the nutritional profiles of bagels can differ dramatically depending on the brand. Some brands, like Wake-N-Bagel, are high in total lipids and sugars, while others, such as Kroger, show more balanced profiles. This variation highlights the importance of brand selection when choosing bagels for a meal, as their nutritional contributions to our diet can vary significantly.\n\n\nCode\nbagel_data &lt;- bread_data |&gt; \n  filter(str_detect(description, regex(\"bagel\", ignore_case = TRUE)))\n\ndraw_biplot(bagel_data |&gt; select(-description, -foodCategory, -brandOwner),\n            label_size = 5, fix_sign = TRUE,)\n\n\n\n\n\n\n\n\n\nWheat Bread Biplot\nLastly, our journey concludes with an in-depth look at wheat bread across brands. The third plot shows how brands like Simply Roundys stand apart with exceptionally high carbohydrate content, while others, such as Angelic Bakehouse, maintain a balanced nutritional profile. This comparison emphasizes how even within the same bread category, brands play a crucial role in defining the nutritional quality. Whether you are shopping for a hearty slice of wheat bread or a light and nutritious option, these insights offer valuable guidance in making informed choices at the grocery store.\n\n\nCode\noptions(warn = -1)\nwheat_bread_data &lt;- bread_data |&gt; \n  filter(str_detect(description, regex(\"wheat\", ignore_case = TRUE)))\n\ndraw_biplot(wheat_bread_data |&gt; select(-description, -foodCategory, -brandOwner),\n            label_size = 3, fix_sign = TRUE,)\n\n\n\n\n\n\n\n\n\nCode\noptions(warn = 0)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#meat",
    "href": "results.html#meat",
    "title": "3  Results",
    "section": "3.3 Meat",
    "text": "3.3 Meat\nNow, let’s dive into the heart of the meal—meat. In the first plot, we explore the nutritional composition of Fish, Poultry, Chicken & Turkey, and Processed Pork. The visual comparison reveals that fish consistently scores high in protein content while keeping fat levels moderate, making it a popular choice for health-conscious eaters. Poultry and chicken tend to cluster lower in fat and cholesterol compared to processed pork, which stands out with higher sodium levels—a likely result of curing and preservation processes. This contrast offers a clear distinction between the natural and processed meat options.\n\n\nCode\n# Fish\nfish_origin &lt;- latest_data[latest_data$foodCategory %in% \"Fish  Unprepared/Unprocessed\", ] |&gt; \n  mutate(packageWeight = str_extract(description, \"\\\\d+\\\\s?(OZ|LB)\")) |&gt; \n  filter(!is.na(packageWeight)) |&gt;  # Drop rows where packageWeight is NA\n  mutate(Meat_Type = \"Fish\")\n\n# Chicken\nchicken_origin &lt;- latest_data[latest_data$foodCategory %in% \"Poultry, Chicken & Turkey\", ]  |&gt; \n  filter(!is.na(packageWeight)) |&gt; \n  mutate(Meat_Type = \"Poultry, Chicken & Turkey\")\n\n# Processed_Pork\nProcessed_Pork_origin &lt;- latest_data[\n  latest_data$foodCategory %in% \"Meat/Poultry/Other Animals  Prepared/Processed\" &\n  grepl(\"BACN|HAM|Sausage\", latest_data$description, ignore.case = TRUE),\n] |&gt; \n  mutate(\n    packageWeight = str_extract(description, \"\\\\d+#\") |&gt; \n                     str_replace(\"#\", \" lbs\"),\n    \n    packageWeight = if_else(\n      is.na(packageWeight),\n      str_extract(description, \"\\\\d+\\\\s?(oz.|lb.)\"),\n      packageWeight\n    ) ,\n    Meat_Type = \"Processed_Pork\"\n  ) |&gt; \n  filter(!is.na(packageWeight))\n\n# Beef and Pork\nbeef_Pork_origin &lt;- latest_data[\n  latest_data$foodCategory %in% \"Other Meats\" &\n  grepl(\"PORK|BEEF\", latest_data$description, ignore.case = TRUE), \n] |&gt; \n  filter(!is.na(packageWeight)) |&gt; \n  mutate(\n    Meat_Type = case_when(\n      grepl(\"BEEF\", description, ignore.case = TRUE) ~ \"Beef\",\n      grepl(\"PORK\", description, ignore.case = TRUE) ~ \"Pork\",\n      TRUE ~ NA_character_  \n    )\n  )\n\n# Merge the whole meat data\ndata_list1 &lt;- list(fish_origin, chicken_origin, Processed_Pork_origin)\n\ncombined_meat_data_1 &lt;- bind_rows(data_list1) |&gt; \n  select(\n    description, \n    packageWeight, \n    `Protein G`, \n    `Total lipid (fat) G`, \n    `Energy KCAL`, \n    `Calcium, Ca MG`,\n    `Iron, Fe MG`,\n    `Sodium, Na MG`,\n    `Cholesterol MG`,\n    `Meat_Type`\n  ) |&gt; \n  drop_na()\n\ndata_cleaned_1 &lt;- align_weight_scale(combined_meat_data_1, food_type = \"solid\")\n\ndata_filtered_1 &lt;- data_cleaned_1 %&gt;%\n  filter(\n    !(`Sodium, Na MG` &gt; 500),\n    !(`Total lipid (fat) G` &gt; 100)\n  )\n\n\nggparcoord(\n  data = data_filtered_1,\n  columns = 2:8,                    # 營養變量的列\n  groupColumn = 9,                 # 使用 Meat_Type 作為分組\n  alpha = 0.5,                      # 透明度\n  scale = \"uniminmax\",              # 標準化數據\n  title = \"Parallel Coordinate Plot with Fish, Chicken and Processed Pork\"\n) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(size = 18, angle = 45, hjust = 1),\n    axis.text.y = element_text(size = 18),\n    axis.title.x = element_text(size = 18),  \n    axis.title.y = element_text(size = 18),\n    legend.title = element_text(size = 18),\n    legend.text = element_text(size = 18),\n    plot.title = element_text(size = 20)\n  ) +\n  labs(x = \"Nutritional Variables\", y = \"Scaled Values\", color = \"Meat Type\")\n\n\n\n\n\n\n\n\n\nThe second chart shifts focus to Beef, Pork, and Poultry (Chicken & Turkey). Beef dominates in protein content and iron, highlighting its role as a nutrient powerhouse, though this comes at the cost of higher fat and cholesterol levels. Pork, sitting between beef and poultry, offers a balanced profile, but its variability in sodium levels stands out—some cuts are lean and natural, while others are heavily processed. Poultry emerges as the leanest choice, appealing to those prioritizing low-fat and low-calorie options.\nTogether, these plots not only provide a nutrient-rich overview of various meat categories but also highlight the trade-offs that come with flavor and processing, helping us appreciate the diverse choices available at the meat counter.\n\n\nCode\n# Merge the whole meat data\ndata_list2 &lt;- list(chicken_origin, beef_Pork_origin)\n\ncombined_meat_data_2 &lt;- bind_rows(data_list2) |&gt; \n  select(\n    description, \n    packageWeight, \n    `Protein G`, \n    `Total lipid (fat) G`, \n    `Energy KCAL`, \n    `Calcium, Ca MG`,\n    `Iron, Fe MG`,\n    `Sodium, Na MG`,\n    `Cholesterol MG`,\n    `Meat_Type`\n  ) |&gt; \n  drop_na()\n\n\ndata_cleaned_2 &lt;- align_weight_scale(combined_meat_data_2, food_type = \"solid\")\n\ndata_filtered_2 &lt;- data_cleaned_2 %&gt;%\n  filter(\n    !(`Sodium, Na MG` &gt; 500),\n    !(`Total lipid (fat) G` &gt; 100)\n  )\n\n\nggparcoord(\n  data = data_filtered_2,\n  columns = 2:8,                   \n  groupColumn = 9,                 \n  alpha = 0.5,                      \n  scale = \"uniminmax\",            \n  title = \"Parallel Coordinate Plot with Chicken, Beef and Pork\"\n) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(size = 18, angle = 45, hjust = 1),\n    axis.text.y = element_text(size = 18),\n    axis.title.x = element_text(size = 18),  \n    axis.title.y = element_text(size = 18),\n    legend.title = element_text(size = 18),\n    legend.text = element_text(size = 18),\n    plot.title = element_text(size = 20)\n  ) +\n  labs(x = \"Nutritional Variables\", y = \"Scaled Values\", color = \"Meat Type\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#vegetable",
    "href": "results.html#vegetable",
    "title": "3  Results",
    "section": "3.4 Vegetable",
    "text": "3.4 Vegetable\nFiber\nAs we move into the world of vegetables, we delve into their nutritional essence—fiber. The Cleveland Dot Plot showcases the top 10 fiber-rich vegetables or fruits, highlighting their contributions to dietary fiber per 100 grams. At the pinnacle, we see “Actually Spicy Crunchy Lentils Superfood Snack,” a clear leader in fiber density, followed by other nutrient-packed options like “100% Natural Organic Chia Seeds” and “100% Chunky Minis Avocado.” This visualization not only emphasizes the variety within vegetables but also their potential as high-fiber staples in a balanced diet. It invites us to explore how different vegetables contribute uniquely to our nutritional needs, inspiring informed choices for a healthier lifestyle.\n\n\nCode\n# Define the list of food categories to filter\nselected_categories &lt;- c(\n  #\"Vegetables - Prepared/Processed\",\n  #\"Vegetables  Prepared/Processed\",\n  \"Vegetable and Lentil Mixes\",\n  \"Tomatoes\",\n  \"Pre-Packaged Fruit & Vegetables\",\n  \"Frozen Vegetables\",\n  #\"Fruit - Prepared/Processed\",\n  \"Fruit  Prepared/Processed\",\n  \"Fruits  Unprepared/Unprocessed (Shelf Stable)\"\n)\n\n# Filter rows based on foodCategory\nvege_fruit_data &lt;- latest_data |&gt; \n  filter(foodCategory %in% selected_categories) |&gt; \n  select(-fdcId)\n\nvege_fruit_data &lt;- align_weight_scale(vege_fruit_data, \"solid\")\n\n# Select top 10 rows based on Fiber\ntop_fiber_data &lt;- vege_fruit_data |&gt;\n  rename(Fiber = `Fiber, total dietary G`) |&gt; \n  arrange(desc(Fiber)) |&gt;\n  slice_head(n = 10)  # Select the top 10 rows\n\n# Draw Cleveland dot plot\nggplot(top_fiber_data, aes(x = Fiber, y = fct_reorder(description, Fiber))) +\n  geom_point(color = 'blue') +\n  ggtitle(\"Cleveland Dot Plot for Top 10 Fiber-Rich Vegetables or Fruits\") +\n  xlab(\"Fiber g/100g\") +\n  ylab(\"\") +\n  theme_linedraw() +\n  theme(\n    axis.text.y = element_text(size = 10),  # Adjust Y-axis label size for better readability\n    axis.text.x = element_text(size = 15),\n    axis.title.x = element_text(size = 15),  \n    plot.title = element_text(size = 20)\n  )+\n  theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank())",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#desserts",
    "href": "results.html#desserts",
    "title": "3  Results",
    "section": "3.5 Desserts",
    "text": "3.5 Desserts\nAs we approach the dessert aisle, the allure of cakes and sweets draws our attention. In this scatter plot, we delve into the relationship between sugar content and calorie count across various cake brands. Each dot represents a brand’s offering, revealing interesting patterns. Brands like “Tastykake” stand out with higher sugar and calorie levels, highlighting their indulgent treats. Meanwhile, brands such as “Schnucks” and “Kroger” show a mix of options, balancing between lower and moderate sugar levels with corresponding calorie ranges. This visual narrative underscores how desserts can vary significantly by brand, providing insight into making informed choices that cater to personal preferences and dietary goals.\n\n\nCode\noptions(warn = -1)\nsnack_origin &lt;- latest_data[latest_data$foodCategory %in% \"Cakes, Cupcakes, Snack Cakes\", ] |&gt; \n  select(\n    description, \n    packageWeight, \n    brandName,\n    `Energy KCAL`, \n    `Total Sugars G`\n  ) |&gt; \n  drop_na()\nsnack_cleaned &lt;- align_weight_scale(snack_origin, food_type = \"solid\")\n\nbrand_freq &lt;- table(snack_cleaned$brandName)\n\n# Filter for brands appearing more than 2 times\nbrands_more_than_two &lt;- names(brand_freq[brand_freq &gt; 3])\n\nsnack &lt;- snack_cleaned[snack_cleaned$brandName %in% brands_more_than_two, ]\n\nggplot(snack, aes(x = `Energy KCAL`, y = `Total Sugars G`, color = brandName)) +\n  geom_point(size = 2, alpha=0.7) + # Add points with size\n  theme_minimal() + # Minimal theme\n  labs(\n    title = \"Scatter Plot: Calories vs Sugar\",\n    x = \"Calories (Energy KCAL)\",\n    y = \"Total Sugars (G)\",\n    color = \"Brand Name\"\n  ) +\n  theme(\n    axis.text.x = element_text(size = 15),\n    axis.text.y = element_text(size = 15),\n    axis.title.x = element_text(size = 15),  \n    axis.title.y = element_text(size = 15),\n    legend.title = element_text(size = 12),\n    legend.text = element_text(size = 12),\n    plot.title = element_text(size = 20)\n  )\n\n\n\n\n\n\n\n\n\nCode\noptions(warn = 0)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#drinks",
    "href": "results.html#drinks",
    "title": "3  Results",
    "section": "3.6 Drinks",
    "text": "3.6 Drinks\napple_juice\nAfter indulging in sweet cakes and desserts, it’s time to quench our thirst. We move to the drinks section, where two classic beverages take the spotlight: apple juice and milk. Each sip of these drinks tells a different story about their brand and nutritional content.\nFirst, we explore the vibrant world of apple juice. Picture yourself in an orchard, choosing the juiciest apples. The PCA chart shows how brands like R.W. Knudsen shine with their high vitamin C content, perhaps reminiscent of freshly squeezed juice bursting with nutrients. On the other hand, brands like Old Orchard cluster together, suggesting a more consistent but less adventurous profile. Whether you’re seeking a health boost or just a familiar taste, the choice is yours.\n\n\nCode\noptions(warn = -1)\napple_juice_data &lt;- latest_data |&gt; \n  filter(\n    str_detect(description, regex(\"Apple\", ignore_case = TRUE)) &  # Contains \"Apple\"\n    str_detect(description, regex(\"Juice\", ignore_case = TRUE))   # Contains \"Juice\"\n  ) |&gt;\n  select(\n    description,\n    brandName, \n    packageWeight, \n    `Vitamin C, total ascorbic acid MG`, \n    `Potassium, K MG`,\n    `Energy KCAL`, \n    `Total Sugars G`\n  ) |&gt; \n  drop_na()\n\napple_juice_data &lt;- align_weight_scale(apple_juice_data, \"liquid\")\n\ndraw_biplot(apple_juice_data |&gt; select(-description))\n\n\n\n\n\n\n\n\n\nCode\noptions(warn = 0)\n\n\nmilk\nNext, we pour a glass of milk—creamy, rich, and comforting. But not all milk is the same! The second PCA chart reveals how brands differentiate. Kemps, sitting apart from the others, suggests a richer, more indulgent milk, perhaps perfect for those seeking higher energy and nutrient content. Meanwhile, brands like Fairlife and Country Fresh offer a more balanced profile, ideal for everyday consumption.\nEach glass tells its own story, inviting us to reflect on what we value most in our drinks—whether it’s indulgence, health, or tradition. And so, our supermarket journey continues, as every aisle reveals another layer of discovery.\n\n\nCode\noptions(warn = -1)\nmilk_data &lt;- latest_data |&gt; \n  filter(foodCategory == \"Milk\") |&gt; \n  filter(\n    str_detect(description, regex(\"Milk\", ignore_case = TRUE)), \n    !str_detect(description, regex(\"CHOCOLATE|STRAWBERRY\", ignore_case = TRUE))\n  ) |&gt;\n  select(\n    description,\n    brandName, \n    packageWeight, \n    `Calcium, Ca MG`, \n    `Total lipid (fat) G`,\n    `Protein G`,\n    `Potassium, K MG`,\n    `Energy KCAL`, \n    `Total Sugars G`\n  ) |&gt; \n  drop_na()\n\nmilk_data &lt;- align_weight_scale(milk_data, \"liquid\")\ndraw_biplot(milk_data |&gt; select(-description))\n\n\n\n\n\n\n\n\n\nCode\noptions(warn = 0)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  }
]